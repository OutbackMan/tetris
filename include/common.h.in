/*******************************************************************************

Copyright (C) 2018, @G_CREATOR@

g_common.h
	"Common macro definitions."

G:
	"@G_DESCRIPTION@"

License:
	"This file is subject to the terms and conditions defined in
	'LICENSE.md', which is part of this source code package."

*******************************************************************************/

#ifndef __common_h__
#define __common_h__

#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/******************************************************************************
 * CMAKE DEFINITIONS
 *****************************************************************************/

#cmakedefine G_VERSION "@G_VERSION@"
#cmakedefine G_BUG_REPORT_ADDRESS "@G_BUG_REPORT_ADDRESS@"
#cmakedefine G_NAME "@G_NAME@"
#cmakedefine G_UNAME "@G_UNAME@"
#cmakedefine G_LNAME "@G_LNAME@"
#cmakedefine G_BINARY_STRING "@G_BINARY_STRING@"
#cmakedefine G_DESCRIPTION "@G_DESCRIPTION@"
#cmakedefine G_CREATOR "@G_CREATOR@"

/******************************************************************************
 * MACROS AND FUNCTIONS
 *****************************************************************************/

#define G_TO_STRING(val)	#val
#define G_STRINGIFY(str)	G_TO_STRING(str)

#define G_INTERNAL static
#define G_LOCAL_PERSIST static

#define G_FALLTHROUGH_INTENDED
#define G_NO_DEFAULT_CASE
#define G_SDL_NO_FLAGS 0

#endif

void g_exit(int exit_status);

/******************************************************************************
 * TYPEDEFS
 *****************************************************************************/

typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
typedef uint64_t u64;
typedef int8_t int8;
typedef int16_t int16;
typedef int32_t int32;
typedef int64_t int64;

/******************************************************************************
 * COMPILER VERSION DETECTION 
 *****************************************************************************/

#if defined(__GNUC__)
#define G_COMPILER "gcc-"G_STRINGIFY(__GNUC__)"." \
	G_STRINGIFY(__GNUC_MINOR__)"." \
	G_STRINGIFY(__GNUC_PATCHLEVEL__)
#elif defined(__llvm__)
#define G_COMPILER "llvm-"G_STRINGIFY(__clang_major__)"." \
		G_STRINGIFY(__clang_minor__)"." \
		G_STRINGIFY(__clang_patchlevel__)
#elif defined(_MSC_VER)
#if _MSC_VER <= 1800
#define G_COMPILER "MSVC 2013"
#elif _MSC_VER <= 1900
#define G_COMPILER "MSVC 2015"
#elif _MSC_VER <= 1912
#define G_COMPILER "MSVC 2017"
#endif
#else
#define G_COMPILER "Unsupported Compiler"
#endif

/******************************************************************************
 * COMPILER EXTENSIONS
 *****************************************************************************/

#if defined(__GNUC__) || defined(__llvm__) 
#define G_ALIGN(val) __attribute__((aligned(val)))
#define G_PURE __attribute__((pure))
#define G_CONST __attribute__((const))
#define G_COLD __attribute__((cold))
#define G_HOT __attribute__((hot))
#define G_CHECK __attribute__((warn_unused_result))
#define G_DEPRECATED __attribute__((deprecated))
#define G_USED __attribute__((used))
#define G_UNUSED __attribute__((unused))
#define G_PACKED __attribute__((packed))
#define G_LIKELY(val) __builtin_expect(!!(val), 1)
#define G_UNLIKELY(val) __builtin_expect(!!(val), 0)
#define G_DESIGNATED __attribute__((designated_init))
#define G_FLATTEN __attribute__((flatten))
#elif defined (_MSC_VER)
#define inline __inline
#define G_ALIGN(val) __declspec(align(val))
#define G_DEPRECATED __declspec(deprecated)
#else
#define G_ALIGN(val)
#define G_PURE
#define G_CONST
#define G_COLD
#define G_HOT
#define G_CHECK
#define G_DEPRECATED
#define G_USED
#define G_UNUSED
#define G_PACKED
#define G_LIKELY(val)
#define G_UNLIKELY(val)
#define G_DESIGNATED
#define G_FLATTEN
#endif

#endif
